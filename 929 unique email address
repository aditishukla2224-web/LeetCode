#include <stdio.h>
#include <stdlib.h>
#include <string.h>

static char* normalize(const char* s) {
    size_t n = strlen(s);
    char* out = (char*)malloc(n + 1); // enough space for normalized email
    size_t j = 0;
    size_t i = 0;

    // Build normalized local name
    while (s[i] && s[i] != '@') {
        if (s[i] == '+') {                  // ignore rest of local part
            while (s[i] && s[i] != '@') i++;
            break;
        }
        if (s[i] != '.') {                  // skip dots in local part
            out[j++] = s[i];
        }
        i++;
    }

    // Copy '@' and full domain as-is
    while (s[i] && s[i] != '@') i++;        // ensure we're at '@'
    if (s[i] == '@') {
        out[j++] = '@';
        i++;
        while (s[i]) out[j++] = s[i++];     // domain unchanged
    }

    out[j] = '\0';
    return out;
}

static int cmp_strptr(const void* a, const void* b) {
    const char* const* pa = (const char* const*)a;
    const char* const* pb = (const char* const*)b;
    return strcmp(*pa, *pb);
}

int numUniqueEmails(char **emails, int emailsSize){
    if (emailsSize <= 1) return emailsSize;

    char** norm = (char**)malloc(sizeof(char*) * emailsSize);
    for (int i = 0; i < emailsSize; ++i) {
        norm[i] = normalize(emails[i]);
    }

    qsort(norm, emailsSize, sizeof(char*), cmp_strptr);

    int unique = 0;
    for (int i = 0; i < emailsSize; ++i) {
        if (i == 0 || strcmp(norm[i], norm[i - 1]) != 0) {
            unique++;
        }
    }

    // cleanup
    for (int i = 0; i < emailsSize; ++i) free(norm[i]);
    free(norm);

    return unique;
}
